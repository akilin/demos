// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pg_identity_always;

#nullable disable

namespace pg_identity_always.Migrations
{
    [DbContext(typeof(IdentityAlwaysContext))]
    partial class IdentityAlwaysContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityAlwaysColumns(modelBuilder);

            modelBuilder.Entity("pg_identity_always.Role", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("TenantId", "Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("pg_identity_always.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("DefaultRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("default_role_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("Id", "DefaultRoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_id_default_role_id");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("pg_identity_always.Role", b =>
                {
                    b.HasOne("pg_identity_always.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("pg_identity_always.Tenant", b =>
                {
                    b.HasOne("pg_identity_always.Role", "DefaultRole")
                        .WithOne()
                        .HasForeignKey("pg_identity_always.Tenant", "Id", "DefaultRoleId")
                        .HasConstraintName("fk_tenants_roles_id_default_role_id");

                    b.Navigation("DefaultRole");
                });
#pragma warning restore 612, 618
        }
    }
}
